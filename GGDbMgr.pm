# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package GGDbMgr;
use base qw(Exporter);
use base qw(DynaLoader);
package GGDbMgrc;
bootstrap GGDbMgr;
package GGDbMgr;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package GGDbMgr;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package GGDbMgr;


############# Class : GGDbMgr::OdbcStringBuffer ##############

package GGDbMgr::OdbcStringBuffer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( GGDbMgr );
%OWNER = ();
%ITERATORS = ();
*swig_buffer_get = *GGDbMgrc::OdbcStringBuffer_buffer_get;
*swig_buffer_set = *GGDbMgrc::OdbcStringBuffer_buffer_set;
*swig_reallen_get = *GGDbMgrc::OdbcStringBuffer_reallen_get;
*swig_reallen_set = *GGDbMgrc::OdbcStringBuffer_reallen_set;
sub new {
    my $pkg = shift;
    my $self = GGDbMgrc::new_OdbcStringBuffer(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        GGDbMgrc::delete_OdbcStringBuffer($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : GGDbMgr::GGDbMgr ##############

package GGDbMgr::GGDbMgr;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( GGDbMgr );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = GGDbMgrc::new_GGDbMgr(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        GGDbMgrc::delete_GGDbMgr($self);
        delete $OWNER{$self};
    }
}

*SetRecSeperator = *GGDbMgrc::GGDbMgr_SetRecSeperator;
*SetFieldSeperator = *GGDbMgrc::GGDbMgr_SetFieldSeperator;
*Connect = *GGDbMgrc::GGDbMgr_Connect;
*Disconnect = *GGDbMgrc::GGDbMgr_Disconnect;
*Commit = *GGDbMgrc::GGDbMgr_Commit;
*Rollback = *GGDbMgrc::GGDbMgr_Rollback;
*GetDebugMsg = *GGDbMgrc::GGDbMgr_GetDebugMsg;
*executeQuery = *GGDbMgrc::GGDbMgr_executeQuery;
*executeUpdate = *GGDbMgrc::GGDbMgr_executeUpdate;
*getConstr = *GGDbMgrc::GGDbMgr_getConstr;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package GGDbMgr;

*ODBC_BUFFER_SIZE = *GGDbMgrc::ODBC_BUFFER_SIZE;
1;
